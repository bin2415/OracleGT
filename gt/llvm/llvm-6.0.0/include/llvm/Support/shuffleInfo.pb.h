// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#ifndef PROTOBUF_INCLUDED_shuffleInfo_2eproto
#define PROTOBUF_INCLUDED_shuffleInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_shuffleInfo_2eproto 

namespace protobuf_shuffleInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_shuffleInfo_2eproto
namespace ShuffleInfo {
class ReorderInfo;
class ReorderInfoDefaultTypeInternal;
extern ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
class ReorderInfo_BinaryInfo;
class ReorderInfo_BinaryInfoDefaultTypeInternal;
extern ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
class ReorderInfo_FixupInfo;
class ReorderInfo_FixupInfoDefaultTypeInternal;
extern ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
class ReorderInfo_FixupInfo_FixupTuple;
class ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal;
extern ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
class ReorderInfo_LayoutInfo;
class ReorderInfo_LayoutInfoDefaultTypeInternal;
extern ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
class ReorderInfo_SourceInfo;
class ReorderInfo_SourceInfoDefaultTypeInternal;
extern ReorderInfo_SourceInfoDefaultTypeInternal _ReorderInfo_SourceInfo_default_instance_;
}  // namespace ShuffleInfo
namespace google {
namespace protobuf {
template<> ::ShuffleInfo::ReorderInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_BinaryInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_LayoutInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_LayoutInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_SourceInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_SourceInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.BinaryInfo) */ {
 public:
  ReorderInfo_BinaryInfo();
  virtual ~ReorderInfo_BinaryInfo();

  ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from);

  inline ReorderInfo_BinaryInfo& operator=(const ReorderInfo_BinaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo_BinaryInfo(ReorderInfo_BinaryInfo&& from) noexcept
    : ReorderInfo_BinaryInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_BinaryInfo& operator=(ReorderInfo_BinaryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo_BinaryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo_BinaryInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_BinaryInfo*>(
               &_ReorderInfo_BinaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReorderInfo_BinaryInfo* other);
  friend void swap(ReorderInfo_BinaryInfo& a, ReorderInfo_BinaryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_BinaryInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(NULL);
  }

  ReorderInfo_BinaryInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo_BinaryInfo& from);
  void MergeFrom(const ReorderInfo_BinaryInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_BinaryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rand_obj_offset = 1;
  bool has_rand_obj_offset() const;
  void clear_rand_obj_offset();
  static const int kRandObjOffsetFieldNumber = 1;
  ::google::protobuf::uint32 rand_obj_offset() const;
  void set_rand_obj_offset(::google::protobuf::uint32 value);

  // optional uint32 main_addr_offset = 2;
  bool has_main_addr_offset() const;
  void clear_main_addr_offset();
  static const int kMainAddrOffsetFieldNumber = 2;
  ::google::protobuf::uint32 main_addr_offset() const;
  void set_main_addr_offset(::google::protobuf::uint32 value);

  // optional uint32 obj_sz = 3;
  bool has_obj_sz() const;
  void clear_obj_sz();
  static const int kObjSzFieldNumber = 3;
  ::google::protobuf::uint32 obj_sz() const;
  void set_obj_sz(::google::protobuf::uint32 value);

  // optional uint32 src_type = 4;
  bool has_src_type() const;
  void clear_src_type();
  static const int kSrcTypeFieldNumber = 4;
  ::google::protobuf::uint32 src_type() const;
  void set_src_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.BinaryInfo)
 private:
  void set_has_rand_obj_offset();
  void clear_has_rand_obj_offset();
  void set_has_main_addr_offset();
  void clear_has_main_addr_offset();
  void set_has_obj_sz();
  void clear_has_obj_sz();
  void set_has_src_type();
  void clear_has_src_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 rand_obj_offset_;
  ::google::protobuf::uint32 main_addr_offset_;
  ::google::protobuf::uint32 obj_sz_;
  ::google::protobuf::uint32 src_type_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorderInfo_LayoutInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.LayoutInfo) */ {
 public:
  ReorderInfo_LayoutInfo();
  virtual ~ReorderInfo_LayoutInfo();

  ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from);

  inline ReorderInfo_LayoutInfo& operator=(const ReorderInfo_LayoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo_LayoutInfo(ReorderInfo_LayoutInfo&& from) noexcept
    : ReorderInfo_LayoutInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_LayoutInfo& operator=(ReorderInfo_LayoutInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo_LayoutInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo_LayoutInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_LayoutInfo*>(
               &_ReorderInfo_LayoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReorderInfo_LayoutInfo* other);
  friend void swap(ReorderInfo_LayoutInfo& a, ReorderInfo_LayoutInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_LayoutInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(NULL);
  }

  ReorderInfo_LayoutInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo_LayoutInfo& from);
  void MergeFrom(const ReorderInfo_LayoutInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_LayoutInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string section_name = 5;
  bool has_section_name() const;
  void clear_section_name();
  static const int kSectionNameFieldNumber = 5;
  const ::std::string& section_name() const;
  void set_section_name(const ::std::string& value);
  #if LANG_CXX11
  void set_section_name(::std::string&& value);
  #endif
  void set_section_name(const char* value);
  void set_section_name(const char* value, size_t size);
  ::std::string* mutable_section_name();
  ::std::string* release_section_name();
  void set_allocated_section_name(::std::string* section_name);

  // optional uint32 bb_size = 1;
  bool has_bb_size() const;
  void clear_bb_size();
  static const int kBbSizeFieldNumber = 1;
  ::google::protobuf::uint32 bb_size() const;
  void set_bb_size(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 num_fixups = 3;
  bool has_num_fixups() const;
  void clear_num_fixups();
  static const int kNumFixupsFieldNumber = 3;
  ::google::protobuf::uint32 num_fixups() const;
  void set_num_fixups(::google::protobuf::uint32 value);

  // optional bool bb_fallthrough = 4;
  bool has_bb_fallthrough() const;
  void clear_bb_fallthrough();
  static const int kBbFallthroughFieldNumber = 4;
  bool bb_fallthrough() const;
  void set_bb_fallthrough(bool value);

  // optional uint32 offset = 6;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 6;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional uint32 padding_size = 7;
  bool has_padding_size() const;
  void clear_padding_size();
  static const int kPaddingSizeFieldNumber = 7;
  ::google::protobuf::uint32 padding_size() const;
  void set_padding_size(::google::protobuf::uint32 value);

  // optional uint32 assemble_type = 8 [default = 0];
  bool has_assemble_type() const;
  void clear_assemble_type();
  static const int kAssembleTypeFieldNumber = 8;
  ::google::protobuf::uint32 assemble_type() const;
  void set_assemble_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.LayoutInfo)
 private:
  void set_has_bb_size();
  void clear_has_bb_size();
  void set_has_type();
  void clear_has_type();
  void set_has_num_fixups();
  void clear_has_num_fixups();
  void set_has_bb_fallthrough();
  void clear_has_bb_fallthrough();
  void set_has_section_name();
  void clear_has_section_name();
  void set_has_offset();
  void clear_has_offset();
  void set_has_padding_size();
  void clear_has_padding_size();
  void set_has_assemble_type();
  void clear_has_assemble_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr section_name_;
  ::google::protobuf::uint32 bb_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_fixups_;
  bool bb_fallthrough_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 padding_size_;
  ::google::protobuf::uint32 assemble_type_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo_FixupTuple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple) */ {
 public:
  ReorderInfo_FixupInfo_FixupTuple();
  virtual ~ReorderInfo_FixupInfo_FixupTuple();

  ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from);

  inline ReorderInfo_FixupInfo_FixupTuple& operator=(const ReorderInfo_FixupInfo_FixupTuple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo_FixupInfo_FixupTuple(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept
    : ReorderInfo_FixupInfo_FixupTuple() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo_FixupTuple& operator=(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo_FixupInfo_FixupTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo_FixupInfo_FixupTuple* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo_FixupTuple*>(
               &_ReorderInfo_FixupInfo_FixupTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReorderInfo_FixupInfo_FixupTuple* other);
  friend void swap(ReorderInfo_FixupInfo_FixupTuple& a, ReorderInfo_FixupInfo_FixupTuple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo_FixupTuple* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(NULL);
  }

  ReorderInfo_FixupInfo_FixupTuple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  void MergeFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string section_name = 5;
  bool has_section_name() const;
  void clear_section_name();
  static const int kSectionNameFieldNumber = 5;
  const ::std::string& section_name() const;
  void set_section_name(const ::std::string& value);
  #if LANG_CXX11
  void set_section_name(::std::string&& value);
  #endif
  void set_section_name(const char* value);
  void set_section_name(const char* value, size_t size);
  ::std::string* mutable_section_name();
  ::std::string* release_section_name();
  void set_allocated_section_name(::std::string* section_name);

  // required uint32 offset = 1;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // required uint32 deref_sz = 2;
  bool has_deref_sz() const;
  void clear_deref_sz();
  static const int kDerefSzFieldNumber = 2;
  ::google::protobuf::uint32 deref_sz() const;
  void set_deref_sz(::google::protobuf::uint32 value);

  // required bool is_rela = 3;
  bool has_is_rela() const;
  void clear_is_rela();
  static const int kIsRelaFieldNumber = 3;
  bool is_rela() const;
  void set_is_rela(bool value);

  // optional uint32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 num_jt_entries = 6;
  bool has_num_jt_entries() const;
  void clear_num_jt_entries();
  static const int kNumJtEntriesFieldNumber = 6;
  ::google::protobuf::uint32 num_jt_entries() const;
  void set_num_jt_entries(::google::protobuf::uint32 value);

  // optional uint32 jt_entry_sz = 7;
  bool has_jt_entry_sz() const;
  void clear_jt_entry_sz();
  static const int kJtEntrySzFieldNumber = 7;
  ::google::protobuf::uint32 jt_entry_sz() const;
  void set_jt_entry_sz(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
 private:
  void set_has_offset();
  void clear_has_offset();
  void set_has_deref_sz();
  void clear_has_deref_sz();
  void set_has_is_rela();
  void clear_has_is_rela();
  void set_has_type();
  void clear_has_type();
  void set_has_section_name();
  void clear_has_section_name();
  void set_has_num_jt_entries();
  void clear_has_num_jt_entries();
  void set_has_jt_entry_sz();
  void clear_has_jt_entry_sz();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr section_name_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 deref_sz_;
  bool is_rela_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_jt_entries_;
  ::google::protobuf::uint32 jt_entry_sz_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo) */ {
 public:
  ReorderInfo_FixupInfo();
  virtual ~ReorderInfo_FixupInfo();

  ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from);

  inline ReorderInfo_FixupInfo& operator=(const ReorderInfo_FixupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo_FixupInfo(ReorderInfo_FixupInfo&& from) noexcept
    : ReorderInfo_FixupInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo& operator=(ReorderInfo_FixupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo_FixupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo_FixupInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo*>(
               &_ReorderInfo_FixupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReorderInfo_FixupInfo* other);
  friend void swap(ReorderInfo_FixupInfo& a, ReorderInfo_FixupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(NULL);
  }

  ReorderInfo_FixupInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo& from);
  void MergeFrom(const ReorderInfo_FixupInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_FixupInfo_FixupTuple FixupTuple;

  // accessors -------------------------------------------------------

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  int text_size() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_text(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_text();
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_text();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      text() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  int rodata_size() const;
  void clear_rodata();
  static const int kRodataFieldNumber = 2;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_rodata(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_rodata();
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_rodata();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      rodata() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_data();
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_data();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      data() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  int datarel_size() const;
  void clear_datarel();
  static const int kDatarelFieldNumber = 4;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_datarel(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_datarel();
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_datarel();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      datarel() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  int initarray_size() const;
  void clear_initarray();
  static const int kInitarrayFieldNumber = 5;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_initarray(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_initarray();
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_initarray();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      initarray() const;

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > text_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > rodata_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > data_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > datarel_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > initarray_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorderInfo_SourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.SourceInfo) */ {
 public:
  ReorderInfo_SourceInfo();
  virtual ~ReorderInfo_SourceInfo();

  ReorderInfo_SourceInfo(const ReorderInfo_SourceInfo& from);

  inline ReorderInfo_SourceInfo& operator=(const ReorderInfo_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo_SourceInfo(ReorderInfo_SourceInfo&& from) noexcept
    : ReorderInfo_SourceInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_SourceInfo& operator=(ReorderInfo_SourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo_SourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo_SourceInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_SourceInfo*>(
               &_ReorderInfo_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReorderInfo_SourceInfo* other);
  friend void swap(ReorderInfo_SourceInfo& a, ReorderInfo_SourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_SourceInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_SourceInfo>(NULL);
  }

  ReorderInfo_SourceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_SourceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo_SourceInfo& from);
  void MergeFrom(const ReorderInfo_SourceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_SourceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 src_type = 1;
  int src_type_size() const;
  void clear_src_type();
  static const int kSrcTypeFieldNumber = 1;
  ::google::protobuf::uint32 src_type(int index) const;
  void set_src_type(int index, ::google::protobuf::uint32 value);
  void add_src_type(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      src_type() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_src_type();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.SourceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > src_type_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReorderInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo) */ {
 public:
  ReorderInfo();
  virtual ~ReorderInfo();

  ReorderInfo(const ReorderInfo& from);

  inline ReorderInfo& operator=(const ReorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReorderInfo(ReorderInfo&& from) noexcept
    : ReorderInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo& operator=(ReorderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReorderInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo*>(
               &_ReorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReorderInfo* other);
  friend void swap(ReorderInfo& a, ReorderInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo>(NULL);
  }

  ReorderInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReorderInfo& from);
  void MergeFrom(const ReorderInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_BinaryInfo BinaryInfo;
  typedef ReorderInfo_LayoutInfo LayoutInfo;
  typedef ReorderInfo_FixupInfo FixupInfo;
  typedef ReorderInfo_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  int layout_size() const;
  void clear_layout();
  static const int kLayoutFieldNumber = 2;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* mutable_layout(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
      mutable_layout();
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* add_layout();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
      layout() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  int fixup_size() const;
  void clear_fixup();
  static const int kFixupFieldNumber = 3;
  ::ShuffleInfo::ReorderInfo_FixupInfo* mutable_fixup(int index);
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
      mutable_fixup();
  const ::ShuffleInfo::ReorderInfo_FixupInfo& fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* add_fixup();
  const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
      fixup() const;

  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  bool has_bin() const;
  void clear_bin();
  static const int kBinFieldNumber = 1;
  private:
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& _internal_bin() const;
  public:
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin() const;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* release_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* mutable_bin();
  void set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin);

  // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  private:
  const ::ShuffleInfo::ReorderInfo_SourceInfo& _internal_source() const;
  public:
  const ::ShuffleInfo::ReorderInfo_SourceInfo& source() const;
  ::ShuffleInfo::ReorderInfo_SourceInfo* release_source();
  ::ShuffleInfo::ReorderInfo_SourceInfo* mutable_source();
  void set_allocated_source(::ShuffleInfo::ReorderInfo_SourceInfo* source);

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo)
 private:
  void set_has_bin();
  void clear_has_bin();
  void set_has_source();
  void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo > layout_;
  ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo > fixup_;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* bin_;
  ::ShuffleInfo::ReorderInfo_SourceInfo* source_;
  friend struct ::protobuf_shuffleInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReorderInfo_BinaryInfo

// optional uint32 rand_obj_offset = 1;
inline bool ReorderInfo_BinaryInfo::has_rand_obj_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorderInfo_BinaryInfo::set_has_rand_obj_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorderInfo_BinaryInfo::clear_has_rand_obj_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorderInfo_BinaryInfo::clear_rand_obj_offset() {
  rand_obj_offset_ = 0u;
  clear_has_rand_obj_offset();
}
inline ::google::protobuf::uint32 ReorderInfo_BinaryInfo::rand_obj_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
  return rand_obj_offset_;
}
inline void ReorderInfo_BinaryInfo::set_rand_obj_offset(::google::protobuf::uint32 value) {
  set_has_rand_obj_offset();
  rand_obj_offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
}

// optional uint32 main_addr_offset = 2;
inline bool ReorderInfo_BinaryInfo::has_main_addr_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorderInfo_BinaryInfo::set_has_main_addr_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorderInfo_BinaryInfo::clear_has_main_addr_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorderInfo_BinaryInfo::clear_main_addr_offset() {
  main_addr_offset_ = 0u;
  clear_has_main_addr_offset();
}
inline ::google::protobuf::uint32 ReorderInfo_BinaryInfo::main_addr_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
  return main_addr_offset_;
}
inline void ReorderInfo_BinaryInfo::set_main_addr_offset(::google::protobuf::uint32 value) {
  set_has_main_addr_offset();
  main_addr_offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
}

// optional uint32 obj_sz = 3;
inline bool ReorderInfo_BinaryInfo::has_obj_sz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReorderInfo_BinaryInfo::set_has_obj_sz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReorderInfo_BinaryInfo::clear_has_obj_sz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReorderInfo_BinaryInfo::clear_obj_sz() {
  obj_sz_ = 0u;
  clear_has_obj_sz();
}
inline ::google::protobuf::uint32 ReorderInfo_BinaryInfo::obj_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
  return obj_sz_;
}
inline void ReorderInfo_BinaryInfo::set_obj_sz(::google::protobuf::uint32 value) {
  set_has_obj_sz();
  obj_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
}

// optional uint32 src_type = 4;
inline bool ReorderInfo_BinaryInfo::has_src_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReorderInfo_BinaryInfo::set_has_src_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReorderInfo_BinaryInfo::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReorderInfo_BinaryInfo::clear_src_type() {
  src_type_ = 0u;
  clear_has_src_type();
}
inline ::google::protobuf::uint32 ReorderInfo_BinaryInfo::src_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
  return src_type_;
}
inline void ReorderInfo_BinaryInfo::set_src_type(::google::protobuf::uint32 value) {
  set_has_src_type();
  src_type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
}

// -------------------------------------------------------------------

// ReorderInfo_LayoutInfo

// optional uint32 bb_size = 1;
inline bool ReorderInfo_LayoutInfo::has_bb_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_bb_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorderInfo_LayoutInfo::clear_has_bb_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorderInfo_LayoutInfo::clear_bb_size() {
  bb_size_ = 0u;
  clear_has_bb_size();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::bb_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
  return bb_size_;
}
inline void ReorderInfo_LayoutInfo::set_bb_size(::google::protobuf::uint32 value) {
  set_has_bb_size();
  bb_size_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
}

// optional uint32 type = 2;
inline bool ReorderInfo_LayoutInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReorderInfo_LayoutInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReorderInfo_LayoutInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.type)
  return type_;
}
inline void ReorderInfo_LayoutInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.type)
}

// optional uint32 num_fixups = 3;
inline bool ReorderInfo_LayoutInfo::has_num_fixups() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_num_fixups() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReorderInfo_LayoutInfo::clear_has_num_fixups() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReorderInfo_LayoutInfo::clear_num_fixups() {
  num_fixups_ = 0u;
  clear_has_num_fixups();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::num_fixups() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
  return num_fixups_;
}
inline void ReorderInfo_LayoutInfo::set_num_fixups(::google::protobuf::uint32 value) {
  set_has_num_fixups();
  num_fixups_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
}

// optional bool bb_fallthrough = 4;
inline bool ReorderInfo_LayoutInfo::has_bb_fallthrough() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_bb_fallthrough() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReorderInfo_LayoutInfo::clear_has_bb_fallthrough() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReorderInfo_LayoutInfo::clear_bb_fallthrough() {
  bb_fallthrough_ = false;
  clear_has_bb_fallthrough();
}
inline bool ReorderInfo_LayoutInfo::bb_fallthrough() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
  return bb_fallthrough_;
}
inline void ReorderInfo_LayoutInfo::set_bb_fallthrough(bool value) {
  set_has_bb_fallthrough();
  bb_fallthrough_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
}

// optional string section_name = 5;
inline bool ReorderInfo_LayoutInfo::has_section_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_section_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorderInfo_LayoutInfo::clear_has_section_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorderInfo_LayoutInfo::clear_section_name() {
  section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section_name();
}
inline const ::std::string& ReorderInfo_LayoutInfo::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return section_name_.GetNoArena();
}
inline void ReorderInfo_LayoutInfo::set_section_name(const ::std::string& value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
#if LANG_CXX11
inline void ReorderInfo_LayoutInfo::set_section_name(::std::string&& value) {
  set_has_section_name();
  section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
#endif
inline void ReorderInfo_LayoutInfo::set_section_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline void ReorderInfo_LayoutInfo::set_section_name(const char* value, size_t size) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline ::std::string* ReorderInfo_LayoutInfo::mutable_section_name() {
  set_has_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReorderInfo_LayoutInfo::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  if (!has_section_name()) {
    return NULL;
  }
  clear_has_section_name();
  return section_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReorderInfo_LayoutInfo::set_allocated_section_name(::std::string* section_name) {
  if (section_name != NULL) {
    set_has_section_name();
  } else {
    clear_has_section_name();
  }
  section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}

// optional uint32 offset = 6;
inline bool ReorderInfo_LayoutInfo::has_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReorderInfo_LayoutInfo::clear_has_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReorderInfo_LayoutInfo::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
  return offset_;
}
inline void ReorderInfo_LayoutInfo::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
}

// optional uint32 padding_size = 7;
inline bool ReorderInfo_LayoutInfo::has_padding_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_padding_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReorderInfo_LayoutInfo::clear_has_padding_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReorderInfo_LayoutInfo::clear_padding_size() {
  padding_size_ = 0u;
  clear_has_padding_size();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::padding_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
  return padding_size_;
}
inline void ReorderInfo_LayoutInfo::set_padding_size(::google::protobuf::uint32 value) {
  set_has_padding_size();
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
}

// optional uint32 assemble_type = 8 [default = 0];
inline bool ReorderInfo_LayoutInfo::has_assemble_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReorderInfo_LayoutInfo::set_has_assemble_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReorderInfo_LayoutInfo::clear_has_assemble_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReorderInfo_LayoutInfo::clear_assemble_type() {
  assemble_type_ = 0u;
  clear_has_assemble_type();
}
inline ::google::protobuf::uint32 ReorderInfo_LayoutInfo::assemble_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
  return assemble_type_;
}
inline void ReorderInfo_LayoutInfo::set_assemble_type(::google::protobuf::uint32 value) {
  set_has_assemble_type();
  assemble_type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo_FixupTuple

// required uint32 offset = 1;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
  return offset_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
}

// required uint32 deref_sz = 2;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_deref_sz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_deref_sz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_deref_sz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_deref_sz() {
  deref_sz_ = 0u;
  clear_has_deref_sz();
}
inline ::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::deref_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
  return deref_sz_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_deref_sz(::google::protobuf::uint32 value) {
  set_has_deref_sz();
  deref_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
}

// required bool is_rela = 3;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_is_rela() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_is_rela() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_is_rela() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_is_rela() {
  is_rela_ = false;
  clear_has_is_rela();
}
inline bool ReorderInfo_FixupInfo_FixupTuple::is_rela() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
  return is_rela_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_is_rela(bool value) {
  set_has_is_rela();
  is_rela_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
}

// optional uint32 type = 4;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
  return type_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
}

// optional string section_name = 5;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_section_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_section_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_section_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_section_name() {
  section_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_section_name();
}
inline const ::std::string& ReorderInfo_FixupInfo_FixupTuple::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return section_name_.GetNoArena();
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const ::std::string& value) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
#if LANG_CXX11
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(::std::string&& value) {
  set_has_section_name();
  section_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
#endif
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value, size_t size) {
  set_has_section_name();
  section_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline ::std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_section_name() {
  set_has_section_name();
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return section_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReorderInfo_FixupInfo_FixupTuple::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  if (!has_section_name()) {
    return NULL;
  }
  clear_has_section_name();
  return section_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_allocated_section_name(::std::string* section_name) {
  if (section_name != NULL) {
    set_has_section_name();
  } else {
    clear_has_section_name();
  }
  section_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), section_name);
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}

// optional uint32 num_jt_entries = 6;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_num_jt_entries() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_num_jt_entries() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_num_jt_entries() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_num_jt_entries() {
  num_jt_entries_ = 0u;
  clear_has_num_jt_entries();
}
inline ::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::num_jt_entries() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
  return num_jt_entries_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_num_jt_entries(::google::protobuf::uint32 value) {
  set_has_num_jt_entries();
  num_jt_entries_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
}

// optional uint32 jt_entry_sz = 7;
inline bool ReorderInfo_FixupInfo_FixupTuple::has_jt_entry_sz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_has_jt_entry_sz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_has_jt_entry_sz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_jt_entry_sz() {
  jt_entry_sz_ = 0u;
  clear_has_jt_entry_sz();
}
inline ::google::protobuf::uint32 ReorderInfo_FixupInfo_FixupTuple::jt_entry_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
  return jt_entry_sz_;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_jt_entry_sz(::google::protobuf::uint32 value) {
  set_has_jt_entry_sz();
  jt_entry_sz_ = value;
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
inline int ReorderInfo_FixupInfo::text_size() const {
  return text_.size();
}
inline void ReorderInfo_FixupInfo::clear_text() {
  text_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return &text_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_text() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::text() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
inline int ReorderInfo_FixupInfo::rodata_size() const {
  return rodata_.size();
}
inline void ReorderInfo_FixupInfo::clear_rodata() {
  rodata_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_rodata(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_rodata() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return &rodata_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::rodata(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_rodata() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::rodata() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
inline int ReorderInfo_FixupInfo::data_size() const {
  return data_.size();
}
inline void ReorderInfo_FixupInfo::clear_data() {
  data_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return &data_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_data() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::data() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
inline int ReorderInfo_FixupInfo::datarel_size() const {
  return datarel_.size();
}
inline void ReorderInfo_FixupInfo::clear_datarel() {
  datarel_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_datarel(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_datarel() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return &datarel_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::datarel(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_datarel() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::datarel() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
inline int ReorderInfo_FixupInfo::initarray_size() const {
  return initarray_.size();
}
inline void ReorderInfo_FixupInfo::clear_initarray() {
  initarray_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_initarray(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_initarray() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return &initarray_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::initarray(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_initarray() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::initarray() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_;
}

// -------------------------------------------------------------------

// ReorderInfo_SourceInfo

// repeated uint32 src_type = 1;
inline int ReorderInfo_SourceInfo::src_type_size() const {
  return src_type_.size();
}
inline void ReorderInfo_SourceInfo::clear_src_type() {
  src_type_.Clear();
}
inline ::google::protobuf::uint32 ReorderInfo_SourceInfo::src_type(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return src_type_.Get(index);
}
inline void ReorderInfo_SourceInfo::set_src_type(int index, ::google::protobuf::uint32 value) {
  src_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
inline void ReorderInfo_SourceInfo::add_src_type(::google::protobuf::uint32 value) {
  src_type_.Add(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReorderInfo_SourceInfo::src_type() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return src_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReorderInfo_SourceInfo::mutable_src_type() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return &src_type_;
}

// -------------------------------------------------------------------

// ReorderInfo

// optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
inline bool ReorderInfo::has_bin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorderInfo::set_has_bin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorderInfo::clear_has_bin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorderInfo::clear_bin() {
  if (bin_ != NULL) bin_->Clear();
  clear_has_bin();
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::_internal_bin() const {
  return *bin_;
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::bin() const {
  const ::ShuffleInfo::ReorderInfo_BinaryInfo* p = bin_;
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.bin)
  return p != NULL ? *p : *reinterpret_cast<const ::ShuffleInfo::ReorderInfo_BinaryInfo*>(
      &::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_);
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::release_bin() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.bin)
  clear_has_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = NULL;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::mutable_bin() {
  set_has_bin();
  if (bin_ == NULL) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(GetArenaNoVirtual());
    bin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.bin)
  return bin_;
}
inline void ReorderInfo::set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bin_;
  }
  if (bin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    set_has_bin();
  } else {
    clear_has_bin();
  }
  bin_ = bin;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.bin)
}

// repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
inline int ReorderInfo::layout_size() const {
  return layout_.size();
}
inline void ReorderInfo::clear_layout() {
  layout_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.layout)
  return layout_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
ReorderInfo::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.layout)
  return &layout_;
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::layout(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.layout)
  return layout_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::add_layout() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.layout)
  return layout_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
ReorderInfo::layout() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.layout)
  return layout_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
inline int ReorderInfo::fixup_size() const {
  return fixup_.size();
}
inline void ReorderInfo::clear_fixup() {
  fixup_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::mutable_fixup(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
ReorderInfo::mutable_fixup() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.fixup)
  return &fixup_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::fixup(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Get(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::add_fixup() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
ReorderInfo::fixup() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.fixup)
  return fixup_;
}

// optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
inline bool ReorderInfo::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorderInfo::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorderInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorderInfo::clear_source() {
  if (source_ != NULL) source_->Clear();
  clear_has_source();
}
inline const ::ShuffleInfo::ReorderInfo_SourceInfo& ReorderInfo::_internal_source() const {
  return *source_;
}
inline const ::ShuffleInfo::ReorderInfo_SourceInfo& ReorderInfo::source() const {
  const ::ShuffleInfo::ReorderInfo_SourceInfo* p = source_;
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.source)
  return p != NULL ? *p : *reinterpret_cast<const ::ShuffleInfo::ReorderInfo_SourceInfo*>(
      &::ShuffleInfo::_ReorderInfo_SourceInfo_default_instance_);
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::release_source() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.source)
  clear_has_source();
  ::ShuffleInfo::ReorderInfo_SourceInfo* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_SourceInfo>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.source)
  return source_;
}
inline void ReorderInfo::set_allocated_source(::ShuffleInfo::ReorderInfo_SourceInfo* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    set_has_source();
  } else {
    clear_has_source();
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShuffleInfo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_shuffleInfo_2eproto
