// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#include "shuffleInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ShuffleInfo {
constexpr ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rand_obj_offset_(0u)
  , main_addr_offset_(0u)
  , obj_sz_(0u)
  , src_type_(0u){}
struct ReorderInfo_BinaryInfoDefaultTypeInternal {
  constexpr ReorderInfo_BinaryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfo_BinaryInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_BinaryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
constexpr ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bb_size_(0u)
  , type_(0u)
  , num_fixups_(0u)
  , bb_fallthrough_(false)
  , offset_(0u)
  , padding_size_(0u)
  , assemble_type_(0u){}
struct ReorderInfo_LayoutInfoDefaultTypeInternal {
  constexpr ReorderInfo_LayoutInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfo_LayoutInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_LayoutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
constexpr ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(0u)
  , deref_sz_(0u)
  , is_rela_(false)
  , type_(0u)
  , num_jt_entries_(0u)
  , jt_entry_sz_(0u){}
struct ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal {
  constexpr ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal() {}
  union {
    ReorderInfo_FixupInfo_FixupTuple _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
constexpr ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_()
  , rodata_()
  , data_()
  , datarel_()
  , initarray_(){}
struct ReorderInfo_FixupInfoDefaultTypeInternal {
  constexpr ReorderInfo_FixupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfo_FixupInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_FixupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
constexpr ReorderInfo_SourceInfo::ReorderInfo_SourceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_type_(){}
struct ReorderInfo_SourceInfoDefaultTypeInternal {
  constexpr ReorderInfo_SourceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfo_SourceInfoDefaultTypeInternal() {}
  union {
    ReorderInfo_SourceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfo_SourceInfoDefaultTypeInternal _ReorderInfo_SourceInfo_default_instance_;
constexpr ReorderInfo::ReorderInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layout_()
  , fixup_()
  , bin_(nullptr)
  , source_(nullptr){}
struct ReorderInfoDefaultTypeInternal {
  constexpr ReorderInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReorderInfoDefaultTypeInternal() {}
  union {
    ReorderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
}  // namespace ShuffleInfo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shuffleInfo_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shuffleInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shuffleInfo_2eproto = nullptr;

const uint32_t TableStruct_shuffleInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, rand_obj_offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, main_addr_offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, obj_sz_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_BinaryInfo, src_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, bb_size_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, num_fixups_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, bb_fallthrough_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, section_name_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, padding_size_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_LayoutInfo, assemble_type_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, offset_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, deref_sz_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, is_rela_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, section_name_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, num_jt_entries_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple, jt_entry_sz_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, text_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, rodata_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, data_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, datarel_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_FixupInfo, initarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo_SourceInfo, src_type_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, bin_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, layout_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, fixup_),
  PROTOBUF_FIELD_OFFSET(::ShuffleInfo::ReorderInfo, source_),
  0,
  ~0u,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::ShuffleInfo::ReorderInfo_BinaryInfo)},
  { 14, 28, -1, sizeof(::ShuffleInfo::ReorderInfo_LayoutInfo)},
  { 36, 49, -1, sizeof(::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple)},
  { 56, -1, -1, sizeof(::ShuffleInfo::ReorderInfo_FixupInfo)},
  { 67, -1, -1, sizeof(::ShuffleInfo::ReorderInfo_SourceInfo)},
  { 74, 84, -1, sizeof(::ShuffleInfo::ReorderInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_LayoutInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_FixupInfo_FixupTuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_FixupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_SourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ShuffleInfo::_ReorderInfo_default_instance_),
};

const char descriptor_table_protodef_shuffleInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021shuffleInfo.proto\022\013ShuffleInfo\"\353\007\n\013Reo"
  "rderInfo\0220\n\003bin\030\001 \001(\0132#.ShuffleInfo.Reor"
  "derInfo.BinaryInfo\0223\n\006layout\030\002 \003(\0132#.Shu"
  "ffleInfo.ReorderInfo.LayoutInfo\0221\n\005fixup"
  "\030\003 \003(\0132\".ShuffleInfo.ReorderInfo.FixupIn"
  "fo\0223\n\006source\030\004 \001(\0132#.ShuffleInfo.Reorder"
  "Info.SourceInfo\032a\n\nBinaryInfo\022\027\n\017rand_ob"
  "j_offset\030\001 \001(\r\022\030\n\020main_addr_offset\030\002 \001(\r"
  "\022\016\n\006obj_sz\030\003 \001(\r\022\020\n\010src_type\030\004 \001(\r\032\255\001\n\nL"
  "ayoutInfo\022\017\n\007bb_size\030\001 \001(\r\022\014\n\004type\030\002 \001(\r"
  "\022\022\n\nnum_fixups\030\003 \001(\r\022\026\n\016bb_fallthrough\030\004"
  " \001(\010\022\024\n\014section_name\030\005 \001(\t\022\016\n\006offset\030\006 \001"
  "(\r\022\024\n\014padding_size\030\007 \001(\r\022\030\n\rassemble_typ"
  "e\030\010 \001(\r:\0010\032\331\003\n\tFixupInfo\022;\n\004text\030\001 \003(\0132-"
  ".ShuffleInfo.ReorderInfo.FixupInfo.Fixup"
  "Tuple\022=\n\006rodata\030\002 \003(\0132-.ShuffleInfo.Reor"
  "derInfo.FixupInfo.FixupTuple\022;\n\004data\030\003 \003"
  "(\0132-.ShuffleInfo.ReorderInfo.FixupInfo.F"
  "ixupTuple\022>\n\007datarel\030\004 \003(\0132-.ShuffleInfo"
  ".ReorderInfo.FixupInfo.FixupTuple\022@\n\tini"
  "tarray\030\005 \003(\0132-.ShuffleInfo.ReorderInfo.F"
  "ixupInfo.FixupTuple\032\220\001\n\nFixupTuple\022\016\n\006of"
  "fset\030\001 \002(\r\022\020\n\010deref_sz\030\002 \002(\r\022\017\n\007is_rela\030"
  "\003 \002(\010\022\014\n\004type\030\004 \001(\r\022\024\n\014section_name\030\005 \001("
  "\t\022\026\n\016num_jt_entries\030\006 \001(\r\022\023\n\013jt_entry_sz"
  "\030\007 \001(\r\032\036\n\nSourceInfo\022\020\n\010src_type\030\001 \003(\r"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shuffleInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shuffleInfo_2eproto = {
  false, false, 1038, descriptor_table_protodef_shuffleInfo_2eproto, "shuffleInfo.proto", 
  &descriptor_table_shuffleInfo_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_shuffleInfo_2eproto::offsets,
  file_level_metadata_shuffleInfo_2eproto, file_level_enum_descriptors_shuffleInfo_2eproto, file_level_service_descriptors_shuffleInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_shuffleInfo_2eproto_getter() {
  return &descriptor_table_shuffleInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_shuffleInfo_2eproto(&descriptor_table_shuffleInfo_2eproto);
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_BinaryInfo>()._has_bits_);
  static void set_has_rand_obj_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_main_addr_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obj_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_src_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}
ReorderInfo_BinaryInfo::ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rand_obj_offset_, &from.rand_obj_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_type_) -
    reinterpret_cast<char*>(&rand_obj_offset_)) + sizeof(src_type_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.BinaryInfo)
}

inline void ReorderInfo_BinaryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rand_obj_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&src_type_) -
    reinterpret_cast<char*>(&rand_obj_offset_)) + sizeof(src_type_));
}

ReorderInfo_BinaryInfo::~ReorderInfo_BinaryInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo_BinaryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderInfo_BinaryInfo::ArenaDtor(void* object) {
  ReorderInfo_BinaryInfo* _this = reinterpret_cast< ReorderInfo_BinaryInfo* >(object);
  (void)_this;
}
void ReorderInfo_BinaryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo_BinaryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo_BinaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&rand_obj_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&src_type_) -
        reinterpret_cast<char*>(&rand_obj_offset_)) + sizeof(src_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_BinaryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rand_obj_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rand_obj_offset(&has_bits);
          rand_obj_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 main_addr_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_main_addr_offset(&has_bits);
          main_addr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 obj_sz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_obj_sz(&has_bits);
          obj_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 src_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_src_type(&has_bits);
          src_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_BinaryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rand_obj_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rand_obj_offset(), target);
  }

  // optional uint32 main_addr_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_main_addr_offset(), target);
  }

  // optional uint32 obj_sz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_obj_sz(), target);
  }

  // optional uint32 src_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_src_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.BinaryInfo)
  return target;
}

size_t ReorderInfo_BinaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 rand_obj_offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rand_obj_offset());
    }

    // optional uint32 main_addr_offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_main_addr_offset());
    }

    // optional uint32 obj_sz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_obj_sz());
    }

    // optional uint32 src_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_src_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_BinaryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo_BinaryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_BinaryInfo::GetClassData() const { return &_class_data_; }

void ReorderInfo_BinaryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo_BinaryInfo *>(to)->MergeFrom(
      static_cast<const ReorderInfo_BinaryInfo &>(from));
}


void ReorderInfo_BinaryInfo::MergeFrom(const ReorderInfo_BinaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rand_obj_offset_ = from.rand_obj_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      main_addr_offset_ = from.main_addr_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      obj_sz_ = from.obj_sz_;
    }
    if (cached_has_bits & 0x00000008u) {
      src_type_ = from.src_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_BinaryInfo::CopyFrom(const ReorderInfo_BinaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.BinaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_BinaryInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_BinaryInfo::InternalSwap(ReorderInfo_BinaryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_BinaryInfo, src_type_)
      + sizeof(ReorderInfo_BinaryInfo::src_type_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_BinaryInfo, rand_obj_offset_)>(
          reinterpret_cast<char*>(&rand_obj_offset_),
          reinterpret_cast<char*>(&other->rand_obj_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_BinaryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[0]);
}

// ===================================================================

class ReorderInfo_LayoutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_LayoutInfo>()._has_bits_);
  static void set_has_bb_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_fixups(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bb_fallthrough(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_section_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_padding_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assemble_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}
ReorderInfo_LayoutInfo::ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_section_name()) {
    section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_section_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bb_size_, &from.bb_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&assemble_type_) -
    reinterpret_cast<char*>(&bb_size_)) + sizeof(assemble_type_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.LayoutInfo)
}

inline void ReorderInfo_LayoutInfo::SharedCtor() {
section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bb_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assemble_type_) -
    reinterpret_cast<char*>(&bb_size_)) + sizeof(assemble_type_));
}

ReorderInfo_LayoutInfo::~ReorderInfo_LayoutInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo_LayoutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  section_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReorderInfo_LayoutInfo::ArenaDtor(void* object) {
  ReorderInfo_LayoutInfo* _this = reinterpret_cast< ReorderInfo_LayoutInfo* >(object);
  (void)_this;
}
void ReorderInfo_LayoutInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo_LayoutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo_LayoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    section_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&bb_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assemble_type_) -
        reinterpret_cast<char*>(&bb_size_)) + sizeof(assemble_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_LayoutInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bb_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb_size(&has_bits);
          bb_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_fixups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_fixups(&has_bits);
          num_fixups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bb_fallthrough = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bb_fallthrough(&has_bits);
          bb_fallthrough_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string section_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_section_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShuffleInfo.ReorderInfo.LayoutInfo.section_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 padding_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_padding_size(&has_bits);
          padding_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assemble_type = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_assemble_type(&has_bits);
          assemble_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_LayoutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bb_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bb_size(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional uint32 num_fixups = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_fixups(), target);
  }

  // optional bool bb_fallthrough = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bb_fallthrough(), target);
  }

  // optional string section_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_section_name().data(), static_cast<int>(this->_internal_section_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.LayoutInfo.section_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_section_name(), target);
  }

  // optional uint32 offset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  // optional uint32 padding_size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_padding_size(), target);
  }

  // optional uint32 assemble_type = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assemble_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.LayoutInfo)
  return target;
}

size_t ReorderInfo_LayoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string section_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_section_name());
    }

    // optional uint32 bb_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bb_size());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 num_fixups = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_fixups());
    }

    // optional bool bb_fallthrough = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 offset = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

    // optional uint32 padding_size = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_padding_size());
    }

    // optional uint32 assemble_type = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_assemble_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_LayoutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo_LayoutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_LayoutInfo::GetClassData() const { return &_class_data_; }

void ReorderInfo_LayoutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo_LayoutInfo *>(to)->MergeFrom(
      static_cast<const ReorderInfo_LayoutInfo &>(from));
}


void ReorderInfo_LayoutInfo::MergeFrom(const ReorderInfo_LayoutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_section_name(from._internal_section_name());
    }
    if (cached_has_bits & 0x00000002u) {
      bb_size_ = from.bb_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_fixups_ = from.num_fixups_;
    }
    if (cached_has_bits & 0x00000010u) {
      bb_fallthrough_ = from.bb_fallthrough_;
    }
    if (cached_has_bits & 0x00000020u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      padding_size_ = from.padding_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      assemble_type_ = from.assemble_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_LayoutInfo::CopyFrom(const ReorderInfo_LayoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.LayoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_LayoutInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_LayoutInfo::InternalSwap(ReorderInfo_LayoutInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &section_name_, lhs_arena,
      &other->section_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_LayoutInfo, assemble_type_)
      + sizeof(ReorderInfo_LayoutInfo::assemble_type_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_LayoutInfo, bb_size_)>(
          reinterpret_cast<char*>(&bb_size_),
          reinterpret_cast<char*>(&other->bb_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_LayoutInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[1]);
}

// ===================================================================

class ReorderInfo_FixupInfo_FixupTuple::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo_FixupInfo_FixupTuple>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deref_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_rela(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_section_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_jt_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jt_entry_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}
ReorderInfo_FixupInfo_FixupTuple::ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_section_name()) {
    section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_section_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&jt_entry_sz_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(jt_entry_sz_));
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
}

inline void ReorderInfo_FixupInfo_FixupTuple::SharedCtor() {
section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jt_entry_sz_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(jt_entry_sz_));
}

ReorderInfo_FixupInfo_FixupTuple::~ReorderInfo_FixupInfo_FixupTuple() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo_FixupInfo_FixupTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  section_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReorderInfo_FixupInfo_FixupTuple::ArenaDtor(void* object) {
  ReorderInfo_FixupInfo_FixupTuple* _this = reinterpret_cast< ReorderInfo_FixupInfo_FixupTuple* >(object);
  (void)_this;
}
void ReorderInfo_FixupInfo_FixupTuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo_FixupInfo_FixupTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo_FixupInfo_FixupTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    section_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jt_entry_sz_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(jt_entry_sz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_FixupInfo_FixupTuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 deref_sz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deref_sz(&has_bits);
          deref_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_rela = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_rela(&has_bits);
          is_rela_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string section_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_section_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_jt_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_jt_entries(&has_bits);
          num_jt_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 jt_entry_sz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_jt_entry_sz(&has_bits);
          jt_entry_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_FixupInfo_FixupTuple::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // required uint32 deref_sz = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deref_sz(), target);
  }

  // required bool is_rela = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_rela(), target);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // optional string section_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_section_name().data(), static_cast<int>(this->_internal_section_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_section_name(), target);
  }

  // optional uint32 num_jt_entries = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_jt_entries(), target);
  }

  // optional uint32 jt_entry_sz = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_jt_entry_sz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  return target;
}

size_t ReorderInfo_FixupInfo_FixupTuple::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  size_t total_size = 0;

  if (_internal_has_offset()) {
    // required uint32 offset = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  if (_internal_has_deref_sz()) {
    // required uint32 deref_sz = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deref_sz());
  }

  if (_internal_has_is_rela()) {
    // required bool is_rela = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ReorderInfo_FixupInfo_FixupTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 offset = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());

    // required uint32 deref_sz = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deref_sz());

    // required bool is_rela = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string section_name = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_section_name());
  }

  if (cached_has_bits & 0x00000070u) {
    // optional uint32 type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 num_jt_entries = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_jt_entries());
    }

    // optional uint32 jt_entry_sz = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_jt_entry_sz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_FixupInfo_FixupTuple::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo_FixupInfo_FixupTuple::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_FixupInfo_FixupTuple::GetClassData() const { return &_class_data_; }

void ReorderInfo_FixupInfo_FixupTuple::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo_FixupInfo_FixupTuple *>(to)->MergeFrom(
      static_cast<const ReorderInfo_FixupInfo_FixupTuple &>(from));
}


void ReorderInfo_FixupInfo_FixupTuple::MergeFrom(const ReorderInfo_FixupInfo_FixupTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_section_name(from._internal_section_name());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      deref_sz_ = from.deref_sz_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_rela_ = from.is_rela_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_jt_entries_ = from.num_jt_entries_;
    }
    if (cached_has_bits & 0x00000040u) {
      jt_entry_sz_ = from.jt_entry_sz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_FixupInfo_FixupTuple::CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo_FixupTuple::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReorderInfo_FixupInfo_FixupTuple::InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &section_name_, lhs_arena,
      &other->section_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, jt_entry_sz_)
      + sizeof(ReorderInfo_FixupInfo_FixupTuple::jt_entry_sz_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo_FixupInfo_FixupTuple, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_FixupInfo_FixupTuple::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[2]);
}

// ===================================================================

class ReorderInfo_FixupInfo::_Internal {
 public:
};

ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  text_(arena),
  rodata_(arena),
  data_(arena),
  datarel_(arena),
  initarray_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}
ReorderInfo_FixupInfo::ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_(from.text_),
      rodata_(from.rodata_),
      data_(from.data_),
      datarel_(from.datarel_),
      initarray_(from.initarray_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.FixupInfo)
}

inline void ReorderInfo_FixupInfo::SharedCtor() {
}

ReorderInfo_FixupInfo::~ReorderInfo_FixupInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.FixupInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo_FixupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderInfo_FixupInfo::ArenaDtor(void* object) {
  ReorderInfo_FixupInfo* _this = reinterpret_cast< ReorderInfo_FixupInfo* >(object);
  (void)_this;
}
void ReorderInfo_FixupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo_FixupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo_FixupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.FixupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  rodata_.Clear();
  data_.Clear();
  datarel_.Clear();
  initarray_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_FixupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rodata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datarel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_FixupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.FixupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text(i), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rodata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rodata(i), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datarel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_datarel(i), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_initarray_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_initarray(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.FixupInfo)
  return target;
}

size_t ReorderInfo_FixupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.FixupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  total_size += 1UL * this->_internal_rodata_size();
  for (const auto& msg : this->rodata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  total_size += 1UL * this->_internal_datarel_size();
  for (const auto& msg : this->datarel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  total_size += 1UL * this->_internal_initarray_size();
  for (const auto& msg : this->initarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_FixupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo_FixupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_FixupInfo::GetClassData() const { return &_class_data_; }

void ReorderInfo_FixupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo_FixupInfo *>(to)->MergeFrom(
      static_cast<const ReorderInfo_FixupInfo &>(from));
}


void ReorderInfo_FixupInfo::MergeFrom(const ReorderInfo_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  rodata_.MergeFrom(from.rodata_);
  data_.MergeFrom(from.data_);
  datarel_.MergeFrom(from.datarel_);
  initarray_.MergeFrom(from.initarray_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_FixupInfo::CopyFrom(const ReorderInfo_FixupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.FixupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_FixupInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(text_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rodata_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datarel_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(initarray_))
    return false;
  return true;
}

void ReorderInfo_FixupInfo::InternalSwap(ReorderInfo_FixupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  text_.InternalSwap(&other->text_);
  rodata_.InternalSwap(&other->rodata_);
  data_.InternalSwap(&other->data_);
  datarel_.InternalSwap(&other->datarel_);
  initarray_.InternalSwap(&other->initarray_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_FixupInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[3]);
}

// ===================================================================

class ReorderInfo_SourceInfo::_Internal {
 public:
};

ReorderInfo_SourceInfo::ReorderInfo_SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  src_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo.SourceInfo)
}
ReorderInfo_SourceInfo::ReorderInfo_SourceInfo(const ReorderInfo_SourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      src_type_(from.src_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo.SourceInfo)
}

inline void ReorderInfo_SourceInfo::SharedCtor() {
}

ReorderInfo_SourceInfo::~ReorderInfo_SourceInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo.SourceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo_SourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReorderInfo_SourceInfo::ArenaDtor(void* object) {
  ReorderInfo_SourceInfo* _this = reinterpret_cast< ReorderInfo_SourceInfo* >(object);
  (void)_this;
}
void ReorderInfo_SourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo_SourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo_SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo.SourceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_type_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo_SourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 src_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_src_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_type(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo_SourceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo.SourceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 src_type = 1;
  for (int i = 0, n = this->_internal_src_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo.SourceInfo)
  return target;
}

size_t ReorderInfo_SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo.SourceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 src_type = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_src_type_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo_SourceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo_SourceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo_SourceInfo::GetClassData() const { return &_class_data_; }

void ReorderInfo_SourceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo_SourceInfo *>(to)->MergeFrom(
      static_cast<const ReorderInfo_SourceInfo &>(from));
}


void ReorderInfo_SourceInfo::MergeFrom(const ReorderInfo_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  src_type_.MergeFrom(from.src_type_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo_SourceInfo::CopyFrom(const ReorderInfo_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo_SourceInfo::IsInitialized() const {
  return true;
}

void ReorderInfo_SourceInfo::InternalSwap(ReorderInfo_SourceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  src_type_.InternalSwap(&other->src_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo_SourceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[4]);
}

// ===================================================================

class ReorderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorderInfo>()._has_bits_);
  static const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin(const ReorderInfo* msg);
  static void set_has_bin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ShuffleInfo::ReorderInfo_SourceInfo& source(const ReorderInfo* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ShuffleInfo::ReorderInfo_BinaryInfo&
ReorderInfo::_Internal::bin(const ReorderInfo* msg) {
  return *msg->bin_;
}
const ::ShuffleInfo::ReorderInfo_SourceInfo&
ReorderInfo::_Internal::source(const ReorderInfo* msg) {
  return *msg->source_;
}
ReorderInfo::ReorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layout_(arena),
  fixup_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ShuffleInfo.ReorderInfo)
}
ReorderInfo::ReorderInfo(const ReorderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      layout_(from.layout_),
      fixup_(from.fixup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bin()) {
    bin_ = new ::ShuffleInfo::ReorderInfo_BinaryInfo(*from.bin_);
  } else {
    bin_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::ShuffleInfo::ReorderInfo_SourceInfo(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ShuffleInfo.ReorderInfo)
}

inline void ReorderInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&bin_)) + sizeof(source_));
}

ReorderInfo::~ReorderInfo() {
  // @@protoc_insertion_point(destructor:ShuffleInfo.ReorderInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReorderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bin_;
  if (this != internal_default_instance()) delete source_;
}

void ReorderInfo::ArenaDtor(void* object) {
  ReorderInfo* _this = reinterpret_cast< ReorderInfo* >(object);
  (void)_this;
}
void ReorderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReorderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShuffleInfo.ReorderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layout_.Clear();
  fixup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bin_ != nullptr);
      bin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReorderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fixup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReorderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShuffleInfo.ReorderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bin(this), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_layout(i), target, stream);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fixup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fixup(i), target, stream);
  }

  // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShuffleInfo.ReorderInfo)
  return target;
}

size_t ReorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShuffleInfo.ReorderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  total_size += 1UL * this->_internal_layout_size();
  for (const auto& msg : this->layout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  total_size += 1UL * this->_internal_fixup_size();
  for (const auto& msg : this->fixup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bin_);
    }

    // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReorderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReorderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReorderInfo::GetClassData() const { return &_class_data_; }

void ReorderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReorderInfo *>(to)->MergeFrom(
      static_cast<const ReorderInfo &>(from));
}


void ReorderInfo::MergeFrom(const ReorderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShuffleInfo.ReorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layout_.MergeFrom(from.layout_);
  fixup_.MergeFrom(from.fixup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bin()->::ShuffleInfo::ReorderInfo_BinaryInfo::MergeFrom(from._internal_bin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_source()->::ShuffleInfo::ReorderInfo_SourceInfo::MergeFrom(from._internal_source());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReorderInfo::CopyFrom(const ReorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShuffleInfo.ReorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fixup_))
    return false;
  return true;
}

void ReorderInfo::InternalSwap(ReorderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layout_.InternalSwap(&other->layout_);
  fixup_.InternalSwap(&other->fixup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReorderInfo, source_)
      + sizeof(ReorderInfo::source_)
      - PROTOBUF_FIELD_OFFSET(ReorderInfo, bin_)>(
          reinterpret_cast<char*>(&bin_),
          reinterpret_cast<char*>(&other->bin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorderInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_shuffleInfo_2eproto_getter, &descriptor_table_shuffleInfo_2eproto_once,
      file_level_metadata_shuffleInfo_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ShuffleInfo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_BinaryInfo* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_BinaryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_BinaryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_LayoutInfo* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_LayoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_LayoutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_FixupInfo* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_FixupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_FixupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo_SourceInfo* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo_SourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo_SourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ShuffleInfo::ReorderInfo* Arena::CreateMaybeMessage< ::ShuffleInfo::ReorderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShuffleInfo::ReorderInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
