// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocks.proto

#include "blocks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace blocks {
constexpr module::module(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fuc_()
  , text_start_(uint64_t{0u})
  , text_end_(uint64_t{0u})
  , split_block_(false){}
struct moduleDefaultTypeInternal {
  constexpr moduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~moduleDefaultTypeInternal() {}
  union {
    module _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT moduleDefaultTypeInternal _module_default_instance_;
constexpr Function::Function(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bb_()
  , calledfunction_()
  , va_(uint64_t{0u})
  , type_(0u){}
struct FunctionDefaultTypeInternal {
  constexpr FunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionDefaultTypeInternal _Function_default_instance_;
constexpr CalledFunction::CalledFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : va_(uint64_t{0u}){}
struct CalledFunctionDefaultTypeInternal {
  constexpr CalledFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalledFunctionDefaultTypeInternal() {}
  union {
    CalledFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalledFunctionDefaultTypeInternal _CalledFunction_default_instance_;
constexpr Child::Child(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : va_(uint64_t{0u}){}
struct ChildDefaultTypeInternal {
  constexpr ChildDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChildDefaultTypeInternal() {}
  union {
    Child _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChildDefaultTypeInternal _Child_default_instance_;
constexpr Instruction::Instruction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : va_(uint64_t{0u})
  , size_(0u)
  , call_type_(0u){}
struct InstructionDefaultTypeInternal {
  constexpr InstructionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstructionDefaultTypeInternal() {}
  union {
    Instruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstructionDefaultTypeInternal _Instruction_default_instance_;
constexpr BasicBlock::BasicBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_()
  , instructions_()
  , va_(uint64_t{0u})
  , parent_(uint64_t{0u})
  , size_(0u)
  , padding_(0u)
  , type_(0u)
  , terminate_(false){}
struct BasicBlockDefaultTypeInternal {
  constexpr BasicBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicBlockDefaultTypeInternal() {}
  union {
    BasicBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicBlockDefaultTypeInternal _BasicBlock_default_instance_;
}  // namespace blocks
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blocks_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blocks_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blocks_2eproto = nullptr;

const uint32_t TableStruct_blocks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::blocks::module, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::module, fuc_),
  PROTOBUF_FIELD_OFFSET(::blocks::module, text_start_),
  PROTOBUF_FIELD_OFFSET(::blocks::module, text_end_),
  PROTOBUF_FIELD_OFFSET(::blocks::module, split_block_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::blocks::Function, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::Function, va_),
  PROTOBUF_FIELD_OFFSET(::blocks::Function, bb_),
  PROTOBUF_FIELD_OFFSET(::blocks::Function, calledfunction_),
  PROTOBUF_FIELD_OFFSET(::blocks::Function, type_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::blocks::CalledFunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::CalledFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::CalledFunction, va_),
  0,
  PROTOBUF_FIELD_OFFSET(::blocks::Child, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::Child, va_),
  0,
  PROTOBUF_FIELD_OFFSET(::blocks::Instruction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::Instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::Instruction, va_),
  PROTOBUF_FIELD_OFFSET(::blocks::Instruction, size_),
  PROTOBUF_FIELD_OFFSET(::blocks::Instruction, call_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, va_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, parent_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, child_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, instructions_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, size_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, padding_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, type_),
  PROTOBUF_FIELD_OFFSET(::blocks::BasicBlock, terminate_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::blocks::module)},
  { 14, 24, -1, sizeof(::blocks::Function)},
  { 28, 35, -1, sizeof(::blocks::CalledFunction)},
  { 36, 43, -1, sizeof(::blocks::Child)},
  { 44, 53, -1, sizeof(::blocks::Instruction)},
  { 56, 70, -1, sizeof(::blocks::BasicBlock)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_module_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_Function_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_CalledFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_Child_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_Instruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::blocks::_BasicBlock_default_instance_),
};

const char descriptor_table_protodef_blocks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014blocks.proto\022\006blocks\"o\n\006module\022\035\n\003fuc\030"
  "\001 \003(\0132\020.blocks.Function\022\025\n\ntext_start\030\002 "
  "\001(\004:\0010\022\023\n\010text_end\030\003 \001(\004:\0010\022\032\n\013split_blo"
  "ck\030\004 \001(\010:\005false\"w\n\010Function\022\n\n\002va\030\001 \002(\004\022"
  "\036\n\002bb\030\002 \003(\0132\022.blocks.BasicBlock\022.\n\016calle"
  "dFunction\030\003 \003(\0132\026.blocks.CalledFunction\022"
  "\017\n\004type\030\004 \001(\r:\0010\"\034\n\016CalledFunction\022\n\n\002va"
  "\030\001 \002(\004\"\023\n\005Child\022\n\n\002va\030\001 \002(\004\"@\n\013Instructi"
  "on\022\n\n\002va\030\001 \002(\004\022\017\n\004size\030\002 \001(\r:\0010\022\024\n\tcall_"
  "type\030\003 \001(\r:\0010\"\301\001\n\nBasicBlock\022\n\n\002va\030\001 \002(\004"
  "\022\016\n\006parent\030\002 \002(\004\022\034\n\005child\030\003 \003(\0132\r.blocks"
  ".Child\022)\n\014instructions\030\004 \003(\0132\023.blocks.In"
  "struction\022\017\n\004size\030\005 \001(\r:\0010\022\022\n\007padding\030\006 "
  "\001(\r:\0010\022\017\n\004type\030\007 \001(\r:\0010\022\030\n\tterminate\030\010 \001"
  "(\010:\005false"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blocks_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blocks_2eproto = {
  false, false, 569, descriptor_table_protodef_blocks_2eproto, "blocks.proto", 
  &descriptor_table_blocks_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_blocks_2eproto::offsets,
  file_level_metadata_blocks_2eproto, file_level_enum_descriptors_blocks_2eproto, file_level_service_descriptors_blocks_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blocks_2eproto_getter() {
  return &descriptor_table_blocks_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blocks_2eproto(&descriptor_table_blocks_2eproto);
namespace blocks {

// ===================================================================

class module::_Internal {
 public:
  using HasBits = decltype(std::declval<module>()._has_bits_);
  static void set_has_text_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_split_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

module::module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fuc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.module)
}
module::module(const module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fuc_(from.fuc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&text_start_, &from.text_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_block_) -
    reinterpret_cast<char*>(&text_start_)) + sizeof(split_block_));
  // @@protoc_insertion_point(copy_constructor:blocks.module)
}

inline void module::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&text_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&split_block_) -
    reinterpret_cast<char*>(&text_start_)) + sizeof(split_block_));
}

module::~module() {
  // @@protoc_insertion_point(destructor:blocks.module)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void module::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void module::ArenaDtor(void* object) {
  module* _this = reinterpret_cast< module* >(object);
  (void)_this;
}
void module::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void module::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.module)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&text_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&split_block_) -
        reinterpret_cast<char*>(&text_start_)) + sizeof(split_block_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* module::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blocks.Function fuc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fuc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 text_start = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_text_start(&has_bits);
          text_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 text_end = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_text_end(&has_bits);
          text_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool split_block = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_split_block(&has_bits);
          split_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* module::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.module)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blocks.Function fuc = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fuc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fuc(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 text_start = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_text_start(), target);
  }

  // optional uint64 text_end = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_text_end(), target);
  }

  // optional bool split_block = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_split_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.module)
  return target;
}

size_t module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.module)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blocks.Function fuc = 1;
  total_size += 1UL * this->_internal_fuc_size();
  for (const auto& msg : this->fuc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 text_start = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_text_start());
    }

    // optional uint64 text_end = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_text_end());
    }

    // optional bool split_block = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData module::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    module::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*module::GetClassData() const { return &_class_data_; }

void module::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<module *>(to)->MergeFrom(
      static_cast<const module &>(from));
}


void module::MergeFrom(const module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.module)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fuc_.MergeFrom(from.fuc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      text_start_ = from.text_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      text_end_ = from.text_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      split_block_ = from.split_block_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void module::CopyFrom(const module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool module::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fuc_)) return false;
  return true;
}

void module::InternalSwap(module* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fuc_.InternalSwap(&other->fuc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(module, split_block_)
      + sizeof(module::split_block_)
      - PROTOBUF_FIELD_OFFSET(module, text_start_)>(
          reinterpret_cast<char*>(&text_start_),
          reinterpret_cast<char*>(&other->text_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata module::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[0]);
}

// ===================================================================

class Function::_Internal {
 public:
  using HasBits = decltype(std::declval<Function>()._has_bits_);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bb_(arena),
  calledfunction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bb_(from.bb_),
      calledfunction_(from.calledfunction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&va_, &from.va_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&va_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:blocks.Function)
}

inline void Function::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&va_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&va_)) + sizeof(type_));
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:blocks.Function)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Function::ArenaDtor(void* object) {
  Function* _this = reinterpret_cast< Function* >(object);
  (void)_this;
}
void Function::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Function::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_.Clear();
  calledfunction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&va_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&va_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 va = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_va(&has_bits);
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .blocks.BasicBlock bb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .blocks.CalledFunction calledFunction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calledfunction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 va = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_va(), target);
  }

  // repeated .blocks.BasicBlock bb = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bb(i), target, stream);
  }

  // repeated .blocks.CalledFunction calledFunction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calledfunction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_calledfunction(i), target, stream);
  }

  // optional uint32 type = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.Function)
  size_t total_size = 0;

  // required uint64 va = 1;
  if (_internal_has_va()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blocks.BasicBlock bb = 2;
  total_size += 1UL * this->_internal_bb_size();
  for (const auto& msg : this->bb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .blocks.CalledFunction calledFunction = 3;
  total_size += 1UL * this->_internal_calledfunction_size();
  for (const auto& msg : this->calledfunction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 type = 4 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Function::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function::GetClassData() const { return &_class_data_; }

void Function::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Function *>(to)->MergeFrom(
      static_cast<const Function &>(from));
}


void Function::MergeFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.Function)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bb_.MergeFrom(from.bb_);
  calledfunction_.MergeFrom(from.calledfunction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      va_ = from.va_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bb_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(calledfunction_)) return false;
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bb_.InternalSwap(&other->bb_);
  calledfunction_.InternalSwap(&other->calledfunction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, type_)
      + sizeof(Function::type_)
      - PROTOBUF_FIELD_OFFSET(Function, va_)>(
          reinterpret_cast<char*>(&va_),
          reinterpret_cast<char*>(&other->va_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Function::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[1]);
}

// ===================================================================

class CalledFunction::_Internal {
 public:
  using HasBits = decltype(std::declval<CalledFunction>()._has_bits_);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CalledFunction::CalledFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.CalledFunction)
}
CalledFunction::CalledFunction(const CalledFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  va_ = from.va_;
  // @@protoc_insertion_point(copy_constructor:blocks.CalledFunction)
}

inline void CalledFunction::SharedCtor() {
va_ = uint64_t{0u};
}

CalledFunction::~CalledFunction() {
  // @@protoc_insertion_point(destructor:blocks.CalledFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CalledFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CalledFunction::ArenaDtor(void* object) {
  CalledFunction* _this = reinterpret_cast< CalledFunction* >(object);
  (void)_this;
}
void CalledFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalledFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalledFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.CalledFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  va_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalledFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 va = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_va(&has_bits);
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalledFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.CalledFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 va = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_va(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.CalledFunction)
  return target;
}

size_t CalledFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.CalledFunction)
  size_t total_size = 0;

  // required uint64 va = 1;
  if (_internal_has_va()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalledFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CalledFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalledFunction::GetClassData() const { return &_class_data_; }

void CalledFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CalledFunction *>(to)->MergeFrom(
      static_cast<const CalledFunction &>(from));
}


void CalledFunction::MergeFrom(const CalledFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.CalledFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_va()) {
    _internal_set_va(from._internal_va());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalledFunction::CopyFrom(const CalledFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.CalledFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalledFunction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CalledFunction::InternalSwap(CalledFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(va_, other->va_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalledFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[2]);
}

// ===================================================================

class Child::_Internal {
 public:
  using HasBits = decltype(std::declval<Child>()._has_bits_);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Child::Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.Child)
}
Child::Child(const Child& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  va_ = from.va_;
  // @@protoc_insertion_point(copy_constructor:blocks.Child)
}

inline void Child::SharedCtor() {
va_ = uint64_t{0u};
}

Child::~Child() {
  // @@protoc_insertion_point(destructor:blocks.Child)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Child::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Child::ArenaDtor(void* object) {
  Child* _this = reinterpret_cast< Child* >(object);
  (void)_this;
}
void Child::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Child::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Child::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.Child)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  va_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Child::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 va = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_va(&has_bits);
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Child::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.Child)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 va = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_va(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.Child)
  return target;
}

size_t Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.Child)
  size_t total_size = 0;

  // required uint64 va = 1;
  if (_internal_has_va()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Child::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Child::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Child::GetClassData() const { return &_class_data_; }

void Child::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Child *>(to)->MergeFrom(
      static_cast<const Child &>(from));
}


void Child::MergeFrom(const Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.Child)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_va()) {
    _internal_set_va(from._internal_va());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Child::CopyFrom(const Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Child::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Child::InternalSwap(Child* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(va_, other->va_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Child::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[3]);
}

// ===================================================================

class Instruction::_Internal {
 public:
  using HasBits = decltype(std::declval<Instruction>()._has_bits_);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_call_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Instruction::Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.Instruction)
}
Instruction::Instruction(const Instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&va_, &from.va_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_type_) -
    reinterpret_cast<char*>(&va_)) + sizeof(call_type_));
  // @@protoc_insertion_point(copy_constructor:blocks.Instruction)
}

inline void Instruction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&va_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&call_type_) -
    reinterpret_cast<char*>(&va_)) + sizeof(call_type_));
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:blocks.Instruction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Instruction::ArenaDtor(void* object) {
  Instruction* _this = reinterpret_cast< Instruction* >(object);
  (void)_this;
}
void Instruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.Instruction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&va_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&call_type_) -
        reinterpret_cast<char*>(&va_)) + sizeof(call_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 va = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_va(&has_bits);
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 call_type = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_call_type(&has_bits);
          call_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instruction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.Instruction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 va = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_va(), target);
  }

  // optional uint32 size = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // optional uint32 call_type = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_call_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.Instruction)
  return target;
}

size_t Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.Instruction)
  size_t total_size = 0;

  // required uint64 va = 1;
  if (_internal_has_va()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 size = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional uint32 call_type = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_call_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Instruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instruction::GetClassData() const { return &_class_data_; }

void Instruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Instruction *>(to)->MergeFrom(
      static_cast<const Instruction &>(from));
}


void Instruction::MergeFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.Instruction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      va_ = from.va_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_type_ = from.call_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Instruction::InternalSwap(Instruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instruction, call_type_)
      + sizeof(Instruction::call_type_)
      - PROTOBUF_FIELD_OFFSET(Instruction, va_)>(
          reinterpret_cast<char*>(&va_),
          reinterpret_cast<char*>(&other->va_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instruction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[4]);
}

// ===================================================================

class BasicBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicBlock>()._has_bits_);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_terminate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

BasicBlock::BasicBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  child_(arena),
  instructions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:blocks.BasicBlock)
}
BasicBlock::BasicBlock(const BasicBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      child_(from.child_),
      instructions_(from.instructions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&va_, &from.va_,
    static_cast<size_t>(reinterpret_cast<char*>(&terminate_) -
    reinterpret_cast<char*>(&va_)) + sizeof(terminate_));
  // @@protoc_insertion_point(copy_constructor:blocks.BasicBlock)
}

inline void BasicBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&va_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terminate_) -
    reinterpret_cast<char*>(&va_)) + sizeof(terminate_));
}

BasicBlock::~BasicBlock() {
  // @@protoc_insertion_point(destructor:blocks.BasicBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasicBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasicBlock::ArenaDtor(void* object) {
  BasicBlock* _this = reinterpret_cast< BasicBlock* >(object);
  (void)_this;
}
void BasicBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:blocks.BasicBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  instructions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&va_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&terminate_) -
        reinterpret_cast<char*>(&va_)) + sizeof(terminate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 va = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_va(&has_bits);
          va_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent(&has_bits);
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .blocks.Child child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .blocks.Instruction instructions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 padding = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_padding(&has_bits);
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool terminate = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_terminate(&has_bits);
          terminate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blocks.BasicBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 va = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_va(), target);
  }

  // required uint64 parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_parent(), target);
  }

  // repeated .blocks.Child child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_child(i), target, stream);
  }

  // repeated .blocks.Instruction instructions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instructions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_instructions(i), target, stream);
  }

  // optional uint32 size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  // optional uint32 padding = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_padding(), target);
  }

  // optional uint32 type = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_type(), target);
  }

  // optional bool terminate = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_terminate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blocks.BasicBlock)
  return target;
}

size_t BasicBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blocks.BasicBlock)
  size_t total_size = 0;

  if (_internal_has_va()) {
    // required uint64 va = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());
  }

  if (_internal_has_parent()) {
    // required uint64 parent = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_parent());
  }

  return total_size;
}
size_t BasicBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blocks.BasicBlock)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 va = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_va());

    // required uint64 parent = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_parent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blocks.Child child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .blocks.Instruction instructions = 4;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional uint32 size = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional uint32 padding = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_padding());
    }

    // optional uint32 type = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional bool terminate = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicBlock::GetClassData() const { return &_class_data_; }

void BasicBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicBlock *>(to)->MergeFrom(
      static_cast<const BasicBlock &>(from));
}


void BasicBlock::MergeFrom(const BasicBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blocks.BasicBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  instructions_.MergeFrom(from.instructions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      va_ = from.va_;
    }
    if (cached_has_bits & 0x00000002u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      padding_ = from.padding_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      terminate_ = from.terminate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicBlock::CopyFrom(const BasicBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blocks.BasicBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicBlock::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(child_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(instructions_)) return false;
  return true;
}

void BasicBlock::InternalSwap(BasicBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_.InternalSwap(&other->child_);
  instructions_.InternalSwap(&other->instructions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasicBlock, terminate_)
      + sizeof(BasicBlock::terminate_)
      - PROTOBUF_FIELD_OFFSET(BasicBlock, va_)>(
          reinterpret_cast<char*>(&va_),
          reinterpret_cast<char*>(&other->va_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blocks_2eproto_getter, &descriptor_table_blocks_2eproto_once,
      file_level_metadata_blocks_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace blocks
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blocks::module* Arena::CreateMaybeMessage< ::blocks::module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::module >(arena);
}
template<> PROTOBUF_NOINLINE ::blocks::Function* Arena::CreateMaybeMessage< ::blocks::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::Function >(arena);
}
template<> PROTOBUF_NOINLINE ::blocks::CalledFunction* Arena::CreateMaybeMessage< ::blocks::CalledFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::CalledFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::blocks::Child* Arena::CreateMaybeMessage< ::blocks::Child >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::Child >(arena);
}
template<> PROTOBUF_NOINLINE ::blocks::Instruction* Arena::CreateMaybeMessage< ::blocks::Instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::Instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::blocks::BasicBlock* Arena::CreateMaybeMessage< ::blocks::BasicBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blocks::BasicBlock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
