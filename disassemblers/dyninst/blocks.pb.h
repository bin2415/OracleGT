// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blocks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blocks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blocks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blocks_2eproto;
namespace blocks {
class BasicBlock;
struct BasicBlockDefaultTypeInternal;
extern BasicBlockDefaultTypeInternal _BasicBlock_default_instance_;
class CalledFunction;
struct CalledFunctionDefaultTypeInternal;
extern CalledFunctionDefaultTypeInternal _CalledFunction_default_instance_;
class Child;
struct ChildDefaultTypeInternal;
extern ChildDefaultTypeInternal _Child_default_instance_;
class Function;
struct FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class Instruction;
struct InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class module;
struct moduleDefaultTypeInternal;
extern moduleDefaultTypeInternal _module_default_instance_;
}  // namespace blocks
PROTOBUF_NAMESPACE_OPEN
template<> ::blocks::BasicBlock* Arena::CreateMaybeMessage<::blocks::BasicBlock>(Arena*);
template<> ::blocks::CalledFunction* Arena::CreateMaybeMessage<::blocks::CalledFunction>(Arena*);
template<> ::blocks::Child* Arena::CreateMaybeMessage<::blocks::Child>(Arena*);
template<> ::blocks::Function* Arena::CreateMaybeMessage<::blocks::Function>(Arena*);
template<> ::blocks::Instruction* Arena::CreateMaybeMessage<::blocks::Instruction>(Arena*);
template<> ::blocks::module* Arena::CreateMaybeMessage<::blocks::module>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blocks {

// ===================================================================

class module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.module) */ {
 public:
  inline module() : module(nullptr) {}
  ~module() override;
  explicit constexpr module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  module(const module& from);
  module(module&& from) noexcept
    : module() {
    *this = ::std::move(from);
  }

  inline module& operator=(const module& from) {
    CopyFrom(from);
    return *this;
  }
  inline module& operator=(module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const module& default_instance() {
    return *internal_default_instance();
  }
  static inline const module* internal_default_instance() {
    return reinterpret_cast<const module*>(
               &_module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(module& a, module& b) {
    a.Swap(&b);
  }
  inline void Swap(module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const module& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.module";
  }
  protected:
  explicit module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFucFieldNumber = 1,
    kTextStartFieldNumber = 2,
    kTextEndFieldNumber = 3,
    kSplitBlockFieldNumber = 4,
  };
  // repeated .blocks.Function fuc = 1;
  int fuc_size() const;
  private:
  int _internal_fuc_size() const;
  public:
  void clear_fuc();
  ::blocks::Function* mutable_fuc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Function >*
      mutable_fuc();
  private:
  const ::blocks::Function& _internal_fuc(int index) const;
  ::blocks::Function* _internal_add_fuc();
  public:
  const ::blocks::Function& fuc(int index) const;
  ::blocks::Function* add_fuc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Function >&
      fuc() const;

  // optional uint64 text_start = 2 [default = 0];
  bool has_text_start() const;
  private:
  bool _internal_has_text_start() const;
  public:
  void clear_text_start();
  uint64_t text_start() const;
  void set_text_start(uint64_t value);
  private:
  uint64_t _internal_text_start() const;
  void _internal_set_text_start(uint64_t value);
  public:

  // optional uint64 text_end = 3 [default = 0];
  bool has_text_end() const;
  private:
  bool _internal_has_text_end() const;
  public:
  void clear_text_end();
  uint64_t text_end() const;
  void set_text_end(uint64_t value);
  private:
  uint64_t _internal_text_end() const;
  void _internal_set_text_end(uint64_t value);
  public:

  // optional bool split_block = 4 [default = false];
  bool has_split_block() const;
  private:
  bool _internal_has_split_block() const;
  public:
  void clear_split_block();
  bool split_block() const;
  void set_split_block(bool value);
  private:
  bool _internal_split_block() const;
  void _internal_set_split_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Function > fuc_;
  uint64_t text_start_;
  uint64_t text_end_;
  bool split_block_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class Function final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.Function) */ {
 public:
  inline Function() : Function(nullptr) {}
  ~Function() override;
  explicit constexpr Function(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Function(const Function& from);
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Function& default_instance() {
    return *internal_default_instance();
  }
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }
  inline void Swap(Function* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Function* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Function* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Function& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Function& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.Function";
  }
  protected:
  explicit Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbFieldNumber = 2,
    kCalledFunctionFieldNumber = 3,
    kVaFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // repeated .blocks.BasicBlock bb = 2;
  int bb_size() const;
  private:
  int _internal_bb_size() const;
  public:
  void clear_bb();
  ::blocks::BasicBlock* mutable_bb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::BasicBlock >*
      mutable_bb();
  private:
  const ::blocks::BasicBlock& _internal_bb(int index) const;
  ::blocks::BasicBlock* _internal_add_bb();
  public:
  const ::blocks::BasicBlock& bb(int index) const;
  ::blocks::BasicBlock* add_bb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::BasicBlock >&
      bb() const;

  // repeated .blocks.CalledFunction calledFunction = 3;
  int calledfunction_size() const;
  private:
  int _internal_calledfunction_size() const;
  public:
  void clear_calledfunction();
  ::blocks::CalledFunction* mutable_calledfunction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::CalledFunction >*
      mutable_calledfunction();
  private:
  const ::blocks::CalledFunction& _internal_calledfunction(int index) const;
  ::blocks::CalledFunction* _internal_add_calledfunction();
  public:
  const ::blocks::CalledFunction& calledfunction(int index) const;
  ::blocks::CalledFunction* add_calledfunction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::CalledFunction >&
      calledfunction() const;

  // required uint64 va = 1;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  uint64_t va() const;
  void set_va(uint64_t value);
  private:
  uint64_t _internal_va() const;
  void _internal_set_va(uint64_t value);
  public:

  // optional uint32 type = 4 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.Function)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::BasicBlock > bb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::CalledFunction > calledfunction_;
  uint64_t va_;
  uint32_t type_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class CalledFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.CalledFunction) */ {
 public:
  inline CalledFunction() : CalledFunction(nullptr) {}
  ~CalledFunction() override;
  explicit constexpr CalledFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalledFunction(const CalledFunction& from);
  CalledFunction(CalledFunction&& from) noexcept
    : CalledFunction() {
    *this = ::std::move(from);
  }

  inline CalledFunction& operator=(const CalledFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalledFunction& operator=(CalledFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalledFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalledFunction* internal_default_instance() {
    return reinterpret_cast<const CalledFunction*>(
               &_CalledFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CalledFunction& a, CalledFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(CalledFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalledFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalledFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalledFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalledFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalledFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalledFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.CalledFunction";
  }
  protected:
  explicit CalledFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaFieldNumber = 1,
  };
  // required uint64 va = 1;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  uint64_t va() const;
  void set_va(uint64_t value);
  private:
  uint64_t _internal_va() const;
  void _internal_set_va(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.CalledFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t va_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class Child final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.Child) */ {
 public:
  inline Child() : Child(nullptr) {}
  ~Child() override;
  explicit constexpr Child(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Child(const Child& from);
  Child(Child&& from) noexcept
    : Child() {
    *this = ::std::move(from);
  }

  inline Child& operator=(const Child& from) {
    CopyFrom(from);
    return *this;
  }
  inline Child& operator=(Child&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Child& default_instance() {
    return *internal_default_instance();
  }
  static inline const Child* internal_default_instance() {
    return reinterpret_cast<const Child*>(
               &_Child_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Child& a, Child& b) {
    a.Swap(&b);
  }
  inline void Swap(Child* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Child* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Child* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Child>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Child& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Child& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Child* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.Child";
  }
  protected:
  explicit Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaFieldNumber = 1,
  };
  // required uint64 va = 1;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  uint64_t va() const;
  void set_va(uint64_t value);
  private:
  uint64_t _internal_va() const;
  void _internal_set_va(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.Child)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t va_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.Instruction) */ {
 public:
  inline Instruction() : Instruction(nullptr) {}
  ~Instruction() override;
  explicit constexpr Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Instruction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.Instruction";
  }
  protected:
  explicit Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaFieldNumber = 1,
    kSizeFieldNumber = 2,
    kCallTypeFieldNumber = 3,
  };
  // required uint64 va = 1;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  uint64_t va() const;
  void set_va(uint64_t value);
  private:
  uint64_t _internal_va() const;
  void _internal_set_va(uint64_t value);
  public:

  // optional uint32 size = 2 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 call_type = 3 [default = 0];
  bool has_call_type() const;
  private:
  bool _internal_has_call_type() const;
  public:
  void clear_call_type();
  uint32_t call_type() const;
  void set_call_type(uint32_t value);
  private:
  uint32_t _internal_call_type() const;
  void _internal_set_call_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.Instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t va_;
  uint32_t size_;
  uint32_t call_type_;
  friend struct ::TableStruct_blocks_2eproto;
};
// -------------------------------------------------------------------

class BasicBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blocks.BasicBlock) */ {
 public:
  inline BasicBlock() : BasicBlock(nullptr) {}
  ~BasicBlock() override;
  explicit constexpr BasicBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicBlock(const BasicBlock& from);
  BasicBlock(BasicBlock&& from) noexcept
    : BasicBlock() {
    *this = ::std::move(from);
  }

  inline BasicBlock& operator=(const BasicBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicBlock& operator=(BasicBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicBlock* internal_default_instance() {
    return reinterpret_cast<const BasicBlock*>(
               &_BasicBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BasicBlock& a, BasicBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasicBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blocks.BasicBlock";
  }
  protected:
  explicit BasicBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kInstructionsFieldNumber = 4,
    kVaFieldNumber = 1,
    kParentFieldNumber = 2,
    kSizeFieldNumber = 5,
    kPaddingFieldNumber = 6,
    kTypeFieldNumber = 7,
    kTerminateFieldNumber = 8,
  };
  // repeated .blocks.Child child = 3;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::blocks::Child* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Child >*
      mutable_child();
  private:
  const ::blocks::Child& _internal_child(int index) const;
  ::blocks::Child* _internal_add_child();
  public:
  const ::blocks::Child& child(int index) const;
  ::blocks::Child* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Child >&
      child() const;

  // repeated .blocks.Instruction instructions = 4;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::blocks::Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Instruction >*
      mutable_instructions();
  private:
  const ::blocks::Instruction& _internal_instructions(int index) const;
  ::blocks::Instruction* _internal_add_instructions();
  public:
  const ::blocks::Instruction& instructions(int index) const;
  ::blocks::Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Instruction >&
      instructions() const;

  // required uint64 va = 1;
  bool has_va() const;
  private:
  bool _internal_has_va() const;
  public:
  void clear_va();
  uint64_t va() const;
  void set_va(uint64_t value);
  private:
  uint64_t _internal_va() const;
  void _internal_set_va(uint64_t value);
  public:

  // required uint64 parent = 2;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  uint64_t parent() const;
  void set_parent(uint64_t value);
  private:
  uint64_t _internal_parent() const;
  void _internal_set_parent(uint64_t value);
  public:

  // optional uint32 size = 5 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 padding = 6 [default = 0];
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  uint32_t padding() const;
  void set_padding(uint32_t value);
  private:
  uint32_t _internal_padding() const;
  void _internal_set_padding(uint32_t value);
  public:

  // optional uint32 type = 7 [default = 0];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional bool terminate = 8 [default = false];
  bool has_terminate() const;
  private:
  bool _internal_has_terminate() const;
  public:
  void clear_terminate();
  bool terminate() const;
  void set_terminate(bool value);
  private:
  bool _internal_terminate() const;
  void _internal_set_terminate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blocks.BasicBlock)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Child > child_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Instruction > instructions_;
  uint64_t va_;
  uint64_t parent_;
  uint32_t size_;
  uint32_t padding_;
  uint32_t type_;
  bool terminate_;
  friend struct ::TableStruct_blocks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// module

// repeated .blocks.Function fuc = 1;
inline int module::_internal_fuc_size() const {
  return fuc_.size();
}
inline int module::fuc_size() const {
  return _internal_fuc_size();
}
inline void module::clear_fuc() {
  fuc_.Clear();
}
inline ::blocks::Function* module::mutable_fuc(int index) {
  // @@protoc_insertion_point(field_mutable:blocks.module.fuc)
  return fuc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Function >*
module::mutable_fuc() {
  // @@protoc_insertion_point(field_mutable_list:blocks.module.fuc)
  return &fuc_;
}
inline const ::blocks::Function& module::_internal_fuc(int index) const {
  return fuc_.Get(index);
}
inline const ::blocks::Function& module::fuc(int index) const {
  // @@protoc_insertion_point(field_get:blocks.module.fuc)
  return _internal_fuc(index);
}
inline ::blocks::Function* module::_internal_add_fuc() {
  return fuc_.Add();
}
inline ::blocks::Function* module::add_fuc() {
  ::blocks::Function* _add = _internal_add_fuc();
  // @@protoc_insertion_point(field_add:blocks.module.fuc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Function >&
module::fuc() const {
  // @@protoc_insertion_point(field_list:blocks.module.fuc)
  return fuc_;
}

// optional uint64 text_start = 2 [default = 0];
inline bool module::_internal_has_text_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool module::has_text_start() const {
  return _internal_has_text_start();
}
inline void module::clear_text_start() {
  text_start_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t module::_internal_text_start() const {
  return text_start_;
}
inline uint64_t module::text_start() const {
  // @@protoc_insertion_point(field_get:blocks.module.text_start)
  return _internal_text_start();
}
inline void module::_internal_set_text_start(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  text_start_ = value;
}
inline void module::set_text_start(uint64_t value) {
  _internal_set_text_start(value);
  // @@protoc_insertion_point(field_set:blocks.module.text_start)
}

// optional uint64 text_end = 3 [default = 0];
inline bool module::_internal_has_text_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool module::has_text_end() const {
  return _internal_has_text_end();
}
inline void module::clear_text_end() {
  text_end_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t module::_internal_text_end() const {
  return text_end_;
}
inline uint64_t module::text_end() const {
  // @@protoc_insertion_point(field_get:blocks.module.text_end)
  return _internal_text_end();
}
inline void module::_internal_set_text_end(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  text_end_ = value;
}
inline void module::set_text_end(uint64_t value) {
  _internal_set_text_end(value);
  // @@protoc_insertion_point(field_set:blocks.module.text_end)
}

// optional bool split_block = 4 [default = false];
inline bool module::_internal_has_split_block() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool module::has_split_block() const {
  return _internal_has_split_block();
}
inline void module::clear_split_block() {
  split_block_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool module::_internal_split_block() const {
  return split_block_;
}
inline bool module::split_block() const {
  // @@protoc_insertion_point(field_get:blocks.module.split_block)
  return _internal_split_block();
}
inline void module::_internal_set_split_block(bool value) {
  _has_bits_[0] |= 0x00000004u;
  split_block_ = value;
}
inline void module::set_split_block(bool value) {
  _internal_set_split_block(value);
  // @@protoc_insertion_point(field_set:blocks.module.split_block)
}

// -------------------------------------------------------------------

// Function

// required uint64 va = 1;
inline bool Function::_internal_has_va() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Function::has_va() const {
  return _internal_has_va();
}
inline void Function::clear_va() {
  va_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Function::_internal_va() const {
  return va_;
}
inline uint64_t Function::va() const {
  // @@protoc_insertion_point(field_get:blocks.Function.va)
  return _internal_va();
}
inline void Function::_internal_set_va(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  va_ = value;
}
inline void Function::set_va(uint64_t value) {
  _internal_set_va(value);
  // @@protoc_insertion_point(field_set:blocks.Function.va)
}

// repeated .blocks.BasicBlock bb = 2;
inline int Function::_internal_bb_size() const {
  return bb_.size();
}
inline int Function::bb_size() const {
  return _internal_bb_size();
}
inline void Function::clear_bb() {
  bb_.Clear();
}
inline ::blocks::BasicBlock* Function::mutable_bb(int index) {
  // @@protoc_insertion_point(field_mutable:blocks.Function.bb)
  return bb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::BasicBlock >*
Function::mutable_bb() {
  // @@protoc_insertion_point(field_mutable_list:blocks.Function.bb)
  return &bb_;
}
inline const ::blocks::BasicBlock& Function::_internal_bb(int index) const {
  return bb_.Get(index);
}
inline const ::blocks::BasicBlock& Function::bb(int index) const {
  // @@protoc_insertion_point(field_get:blocks.Function.bb)
  return _internal_bb(index);
}
inline ::blocks::BasicBlock* Function::_internal_add_bb() {
  return bb_.Add();
}
inline ::blocks::BasicBlock* Function::add_bb() {
  ::blocks::BasicBlock* _add = _internal_add_bb();
  // @@protoc_insertion_point(field_add:blocks.Function.bb)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::BasicBlock >&
Function::bb() const {
  // @@protoc_insertion_point(field_list:blocks.Function.bb)
  return bb_;
}

// repeated .blocks.CalledFunction calledFunction = 3;
inline int Function::_internal_calledfunction_size() const {
  return calledfunction_.size();
}
inline int Function::calledfunction_size() const {
  return _internal_calledfunction_size();
}
inline void Function::clear_calledfunction() {
  calledfunction_.Clear();
}
inline ::blocks::CalledFunction* Function::mutable_calledfunction(int index) {
  // @@protoc_insertion_point(field_mutable:blocks.Function.calledFunction)
  return calledfunction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::CalledFunction >*
Function::mutable_calledfunction() {
  // @@protoc_insertion_point(field_mutable_list:blocks.Function.calledFunction)
  return &calledfunction_;
}
inline const ::blocks::CalledFunction& Function::_internal_calledfunction(int index) const {
  return calledfunction_.Get(index);
}
inline const ::blocks::CalledFunction& Function::calledfunction(int index) const {
  // @@protoc_insertion_point(field_get:blocks.Function.calledFunction)
  return _internal_calledfunction(index);
}
inline ::blocks::CalledFunction* Function::_internal_add_calledfunction() {
  return calledfunction_.Add();
}
inline ::blocks::CalledFunction* Function::add_calledfunction() {
  ::blocks::CalledFunction* _add = _internal_add_calledfunction();
  // @@protoc_insertion_point(field_add:blocks.Function.calledFunction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::CalledFunction >&
Function::calledfunction() const {
  // @@protoc_insertion_point(field_list:blocks.Function.calledFunction)
  return calledfunction_;
}

// optional uint32 type = 4 [default = 0];
inline bool Function::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Function::has_type() const {
  return _internal_has_type();
}
inline void Function::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Function::_internal_type() const {
  return type_;
}
inline uint32_t Function::type() const {
  // @@protoc_insertion_point(field_get:blocks.Function.type)
  return _internal_type();
}
inline void Function::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Function::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blocks.Function.type)
}

// -------------------------------------------------------------------

// CalledFunction

// required uint64 va = 1;
inline bool CalledFunction::_internal_has_va() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalledFunction::has_va() const {
  return _internal_has_va();
}
inline void CalledFunction::clear_va() {
  va_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CalledFunction::_internal_va() const {
  return va_;
}
inline uint64_t CalledFunction::va() const {
  // @@protoc_insertion_point(field_get:blocks.CalledFunction.va)
  return _internal_va();
}
inline void CalledFunction::_internal_set_va(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  va_ = value;
}
inline void CalledFunction::set_va(uint64_t value) {
  _internal_set_va(value);
  // @@protoc_insertion_point(field_set:blocks.CalledFunction.va)
}

// -------------------------------------------------------------------

// Child

// required uint64 va = 1;
inline bool Child::_internal_has_va() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Child::has_va() const {
  return _internal_has_va();
}
inline void Child::clear_va() {
  va_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Child::_internal_va() const {
  return va_;
}
inline uint64_t Child::va() const {
  // @@protoc_insertion_point(field_get:blocks.Child.va)
  return _internal_va();
}
inline void Child::_internal_set_va(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  va_ = value;
}
inline void Child::set_va(uint64_t value) {
  _internal_set_va(value);
  // @@protoc_insertion_point(field_set:blocks.Child.va)
}

// -------------------------------------------------------------------

// Instruction

// required uint64 va = 1;
inline bool Instruction::_internal_has_va() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Instruction::has_va() const {
  return _internal_has_va();
}
inline void Instruction::clear_va() {
  va_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Instruction::_internal_va() const {
  return va_;
}
inline uint64_t Instruction::va() const {
  // @@protoc_insertion_point(field_get:blocks.Instruction.va)
  return _internal_va();
}
inline void Instruction::_internal_set_va(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  va_ = value;
}
inline void Instruction::set_va(uint64_t value) {
  _internal_set_va(value);
  // @@protoc_insertion_point(field_set:blocks.Instruction.va)
}

// optional uint32 size = 2 [default = 0];
inline bool Instruction::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Instruction::has_size() const {
  return _internal_has_size();
}
inline void Instruction::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Instruction::_internal_size() const {
  return size_;
}
inline uint32_t Instruction::size() const {
  // @@protoc_insertion_point(field_get:blocks.Instruction.size)
  return _internal_size();
}
inline void Instruction::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void Instruction::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:blocks.Instruction.size)
}

// optional uint32 call_type = 3 [default = 0];
inline bool Instruction::_internal_has_call_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Instruction::has_call_type() const {
  return _internal_has_call_type();
}
inline void Instruction::clear_call_type() {
  call_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Instruction::_internal_call_type() const {
  return call_type_;
}
inline uint32_t Instruction::call_type() const {
  // @@protoc_insertion_point(field_get:blocks.Instruction.call_type)
  return _internal_call_type();
}
inline void Instruction::_internal_set_call_type(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  call_type_ = value;
}
inline void Instruction::set_call_type(uint32_t value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:blocks.Instruction.call_type)
}

// -------------------------------------------------------------------

// BasicBlock

// required uint64 va = 1;
inline bool BasicBlock::_internal_has_va() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BasicBlock::has_va() const {
  return _internal_has_va();
}
inline void BasicBlock::clear_va() {
  va_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t BasicBlock::_internal_va() const {
  return va_;
}
inline uint64_t BasicBlock::va() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.va)
  return _internal_va();
}
inline void BasicBlock::_internal_set_va(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  va_ = value;
}
inline void BasicBlock::set_va(uint64_t value) {
  _internal_set_va(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.va)
}

// required uint64 parent = 2;
inline bool BasicBlock::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BasicBlock::has_parent() const {
  return _internal_has_parent();
}
inline void BasicBlock::clear_parent() {
  parent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t BasicBlock::_internal_parent() const {
  return parent_;
}
inline uint64_t BasicBlock::parent() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.parent)
  return _internal_parent();
}
inline void BasicBlock::_internal_set_parent(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  parent_ = value;
}
inline void BasicBlock::set_parent(uint64_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.parent)
}

// repeated .blocks.Child child = 3;
inline int BasicBlock::_internal_child_size() const {
  return child_.size();
}
inline int BasicBlock::child_size() const {
  return _internal_child_size();
}
inline void BasicBlock::clear_child() {
  child_.Clear();
}
inline ::blocks::Child* BasicBlock::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:blocks.BasicBlock.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Child >*
BasicBlock::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:blocks.BasicBlock.child)
  return &child_;
}
inline const ::blocks::Child& BasicBlock::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::blocks::Child& BasicBlock::child(int index) const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.child)
  return _internal_child(index);
}
inline ::blocks::Child* BasicBlock::_internal_add_child() {
  return child_.Add();
}
inline ::blocks::Child* BasicBlock::add_child() {
  ::blocks::Child* _add = _internal_add_child();
  // @@protoc_insertion_point(field_add:blocks.BasicBlock.child)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Child >&
BasicBlock::child() const {
  // @@protoc_insertion_point(field_list:blocks.BasicBlock.child)
  return child_;
}

// repeated .blocks.Instruction instructions = 4;
inline int BasicBlock::_internal_instructions_size() const {
  return instructions_.size();
}
inline int BasicBlock::instructions_size() const {
  return _internal_instructions_size();
}
inline void BasicBlock::clear_instructions() {
  instructions_.Clear();
}
inline ::blocks::Instruction* BasicBlock::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:blocks.BasicBlock.instructions)
  return instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Instruction >*
BasicBlock::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:blocks.BasicBlock.instructions)
  return &instructions_;
}
inline const ::blocks::Instruction& BasicBlock::_internal_instructions(int index) const {
  return instructions_.Get(index);
}
inline const ::blocks::Instruction& BasicBlock::instructions(int index) const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.instructions)
  return _internal_instructions(index);
}
inline ::blocks::Instruction* BasicBlock::_internal_add_instructions() {
  return instructions_.Add();
}
inline ::blocks::Instruction* BasicBlock::add_instructions() {
  ::blocks::Instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:blocks.BasicBlock.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blocks::Instruction >&
BasicBlock::instructions() const {
  // @@protoc_insertion_point(field_list:blocks.BasicBlock.instructions)
  return instructions_;
}

// optional uint32 size = 5 [default = 0];
inline bool BasicBlock::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BasicBlock::has_size() const {
  return _internal_has_size();
}
inline void BasicBlock::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BasicBlock::_internal_size() const {
  return size_;
}
inline uint32_t BasicBlock::size() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.size)
  return _internal_size();
}
inline void BasicBlock::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void BasicBlock::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.size)
}

// optional uint32 padding = 6 [default = 0];
inline bool BasicBlock::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BasicBlock::has_padding() const {
  return _internal_has_padding();
}
inline void BasicBlock::clear_padding() {
  padding_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BasicBlock::_internal_padding() const {
  return padding_;
}
inline uint32_t BasicBlock::padding() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.padding)
  return _internal_padding();
}
inline void BasicBlock::_internal_set_padding(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  padding_ = value;
}
inline void BasicBlock::set_padding(uint32_t value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.padding)
}

// optional uint32 type = 7 [default = 0];
inline bool BasicBlock::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BasicBlock::has_type() const {
  return _internal_has_type();
}
inline void BasicBlock::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t BasicBlock::_internal_type() const {
  return type_;
}
inline uint32_t BasicBlock::type() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.type)
  return _internal_type();
}
inline void BasicBlock::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void BasicBlock::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.type)
}

// optional bool terminate = 8 [default = false];
inline bool BasicBlock::_internal_has_terminate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BasicBlock::has_terminate() const {
  return _internal_has_terminate();
}
inline void BasicBlock::clear_terminate() {
  terminate_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BasicBlock::_internal_terminate() const {
  return terminate_;
}
inline bool BasicBlock::terminate() const {
  // @@protoc_insertion_point(field_get:blocks.BasicBlock.terminate)
  return _internal_terminate();
}
inline void BasicBlock::_internal_set_terminate(bool value) {
  _has_bits_[0] |= 0x00000020u;
  terminate_ = value;
}
inline void BasicBlock::set_terminate(bool value) {
  _internal_set_terminate(value);
  // @@protoc_insertion_point(field_set:blocks.BasicBlock.terminate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blocks

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blocks_2eproto
